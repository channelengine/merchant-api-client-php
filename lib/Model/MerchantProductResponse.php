<?php
/**
 * MerchantProductResponse
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  ChannelEngine\Merchant\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ChannelEngine Merchant API
 *
 * ChannelEngine API for merchants
 *
 * The version of the OpenAPI document: 2.13.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ChannelEngine\Merchant\ApiClient\Model;

use \ArrayAccess;
use \ChannelEngine\Merchant\ApiClient\ObjectSerializer;

/**
 * MerchantProductResponse Class Doc Comment
 *
 * @category Class
 * @package  ChannelEngine\Merchant\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class MerchantProductResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MerchantProductResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'isActive' => 'bool',
        'extraData' => '\ChannelEngine\Merchant\ApiClient\Model\MerchantProductExtraDataItemResponse[]',
        'name' => 'string',
        'description' => 'string',
        'brand' => 'string',
        'size' => 'string',
        'color' => 'string',
        'ean' => 'string',
        'manufacturerProductNumber' => 'string',
        'merchantProductNo' => 'string',
        'stock' => 'int',
        'price' => 'float',
        'mSRP' => 'float',
        'purchasePrice' => 'float',
        'vatRateType' => '\ChannelEngine\Merchant\ApiClient\Model\VatRateType',
        'shippingCost' => 'float',
        'shippingTime' => 'string',
        'url' => 'string',
        'imageUrl' => 'string',
        'extraImageUrl1' => 'string',
        'extraImageUrl2' => 'string',
        'extraImageUrl3' => 'string',
        'extraImageUrl4' => 'string',
        'extraImageUrl5' => 'string',
        'extraImageUrl6' => 'string',
        'extraImageUrl7' => 'string',
        'extraImageUrl8' => 'string',
        'extraImageUrl9' => 'string',
        'categoryTrail' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'isActive' => null,
        'extraData' => null,
        'name' => null,
        'description' => null,
        'brand' => null,
        'size' => null,
        'color' => null,
        'ean' => null,
        'manufacturerProductNumber' => null,
        'merchantProductNo' => null,
        'stock' => 'int32',
        'price' => 'decimal',
        'mSRP' => 'decimal',
        'purchasePrice' => 'decimal',
        'vatRateType' => null,
        'shippingCost' => 'decimal',
        'shippingTime' => null,
        'url' => null,
        'imageUrl' => null,
        'extraImageUrl1' => null,
        'extraImageUrl2' => null,
        'extraImageUrl3' => null,
        'extraImageUrl4' => null,
        'extraImageUrl5' => null,
        'extraImageUrl6' => null,
        'extraImageUrl7' => null,
        'extraImageUrl8' => null,
        'extraImageUrl9' => null,
        'categoryTrail' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'isActive' => 'IsActive',
        'extraData' => 'ExtraData',
        'name' => 'Name',
        'description' => 'Description',
        'brand' => 'Brand',
        'size' => 'Size',
        'color' => 'Color',
        'ean' => 'Ean',
        'manufacturerProductNumber' => 'ManufacturerProductNumber',
        'merchantProductNo' => 'MerchantProductNo',
        'stock' => 'Stock',
        'price' => 'Price',
        'mSRP' => 'MSRP',
        'purchasePrice' => 'PurchasePrice',
        'vatRateType' => 'VatRateType',
        'shippingCost' => 'ShippingCost',
        'shippingTime' => 'ShippingTime',
        'url' => 'Url',
        'imageUrl' => 'ImageUrl',
        'extraImageUrl1' => 'ExtraImageUrl1',
        'extraImageUrl2' => 'ExtraImageUrl2',
        'extraImageUrl3' => 'ExtraImageUrl3',
        'extraImageUrl4' => 'ExtraImageUrl4',
        'extraImageUrl5' => 'ExtraImageUrl5',
        'extraImageUrl6' => 'ExtraImageUrl6',
        'extraImageUrl7' => 'ExtraImageUrl7',
        'extraImageUrl8' => 'ExtraImageUrl8',
        'extraImageUrl9' => 'ExtraImageUrl9',
        'categoryTrail' => 'CategoryTrail'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'isActive' => 'setIsActive',
        'extraData' => 'setExtraData',
        'name' => 'setName',
        'description' => 'setDescription',
        'brand' => 'setBrand',
        'size' => 'setSize',
        'color' => 'setColor',
        'ean' => 'setEan',
        'manufacturerProductNumber' => 'setManufacturerProductNumber',
        'merchantProductNo' => 'setMerchantProductNo',
        'stock' => 'setStock',
        'price' => 'setPrice',
        'mSRP' => 'setMSRP',
        'purchasePrice' => 'setPurchasePrice',
        'vatRateType' => 'setVatRateType',
        'shippingCost' => 'setShippingCost',
        'shippingTime' => 'setShippingTime',
        'url' => 'setUrl',
        'imageUrl' => 'setImageUrl',
        'extraImageUrl1' => 'setExtraImageUrl1',
        'extraImageUrl2' => 'setExtraImageUrl2',
        'extraImageUrl3' => 'setExtraImageUrl3',
        'extraImageUrl4' => 'setExtraImageUrl4',
        'extraImageUrl5' => 'setExtraImageUrl5',
        'extraImageUrl6' => 'setExtraImageUrl6',
        'extraImageUrl7' => 'setExtraImageUrl7',
        'extraImageUrl8' => 'setExtraImageUrl8',
        'extraImageUrl9' => 'setExtraImageUrl9',
        'categoryTrail' => 'setCategoryTrail'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'isActive' => 'getIsActive',
        'extraData' => 'getExtraData',
        'name' => 'getName',
        'description' => 'getDescription',
        'brand' => 'getBrand',
        'size' => 'getSize',
        'color' => 'getColor',
        'ean' => 'getEan',
        'manufacturerProductNumber' => 'getManufacturerProductNumber',
        'merchantProductNo' => 'getMerchantProductNo',
        'stock' => 'getStock',
        'price' => 'getPrice',
        'mSRP' => 'getMSRP',
        'purchasePrice' => 'getPurchasePrice',
        'vatRateType' => 'getVatRateType',
        'shippingCost' => 'getShippingCost',
        'shippingTime' => 'getShippingTime',
        'url' => 'getUrl',
        'imageUrl' => 'getImageUrl',
        'extraImageUrl1' => 'getExtraImageUrl1',
        'extraImageUrl2' => 'getExtraImageUrl2',
        'extraImageUrl3' => 'getExtraImageUrl3',
        'extraImageUrl4' => 'getExtraImageUrl4',
        'extraImageUrl5' => 'getExtraImageUrl5',
        'extraImageUrl6' => 'getExtraImageUrl6',
        'extraImageUrl7' => 'getExtraImageUrl7',
        'extraImageUrl8' => 'getExtraImageUrl8',
        'extraImageUrl9' => 'getExtraImageUrl9',
        'categoryTrail' => 'getCategoryTrail'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['isActive'] = $data['isActive'] ?? null;
        $this->container['extraData'] = $data['extraData'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['brand'] = $data['brand'] ?? null;
        $this->container['size'] = $data['size'] ?? null;
        $this->container['color'] = $data['color'] ?? null;
        $this->container['ean'] = $data['ean'] ?? null;
        $this->container['manufacturerProductNumber'] = $data['manufacturerProductNumber'] ?? null;
        $this->container['merchantProductNo'] = $data['merchantProductNo'] ?? null;
        $this->container['stock'] = $data['stock'] ?? null;
        $this->container['price'] = $data['price'] ?? null;
        $this->container['mSRP'] = $data['mSRP'] ?? null;
        $this->container['purchasePrice'] = $data['purchasePrice'] ?? null;
        $this->container['vatRateType'] = $data['vatRateType'] ?? null;
        $this->container['shippingCost'] = $data['shippingCost'] ?? null;
        $this->container['shippingTime'] = $data['shippingTime'] ?? null;
        $this->container['url'] = $data['url'] ?? null;
        $this->container['imageUrl'] = $data['imageUrl'] ?? null;
        $this->container['extraImageUrl1'] = $data['extraImageUrl1'] ?? null;
        $this->container['extraImageUrl2'] = $data['extraImageUrl2'] ?? null;
        $this->container['extraImageUrl3'] = $data['extraImageUrl3'] ?? null;
        $this->container['extraImageUrl4'] = $data['extraImageUrl4'] ?? null;
        $this->container['extraImageUrl5'] = $data['extraImageUrl5'] ?? null;
        $this->container['extraImageUrl6'] = $data['extraImageUrl6'] ?? null;
        $this->container['extraImageUrl7'] = $data['extraImageUrl7'] ?? null;
        $this->container['extraImageUrl8'] = $data['extraImageUrl8'] ?? null;
        $this->container['extraImageUrl9'] = $data['extraImageUrl9'] ?? null;
        $this->container['categoryTrail'] = $data['categoryTrail'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 256)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) < 0)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['brand']) && (mb_strlen($this->container['brand']) > 256)) {
            $invalidProperties[] = "invalid value for 'brand', the character length must be smaller than or equal to 256.";
        }

        if (!is_null($this->container['brand']) && (mb_strlen($this->container['brand']) < 0)) {
            $invalidProperties[] = "invalid value for 'brand', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['size']) && (mb_strlen($this->container['size']) > 64)) {
            $invalidProperties[] = "invalid value for 'size', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['size']) && (mb_strlen($this->container['size']) < 0)) {
            $invalidProperties[] = "invalid value for 'size', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['color']) && (mb_strlen($this->container['color']) > 64)) {
            $invalidProperties[] = "invalid value for 'color', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['color']) && (mb_strlen($this->container['color']) < 0)) {
            $invalidProperties[] = "invalid value for 'color', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['ean']) && (mb_strlen($this->container['ean']) > 64)) {
            $invalidProperties[] = "invalid value for 'ean', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['ean']) && (mb_strlen($this->container['ean']) < 0)) {
            $invalidProperties[] = "invalid value for 'ean', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['manufacturerProductNumber']) && (mb_strlen($this->container['manufacturerProductNumber']) > 64)) {
            $invalidProperties[] = "invalid value for 'manufacturerProductNumber', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['manufacturerProductNumber']) && (mb_strlen($this->container['manufacturerProductNumber']) < 0)) {
            $invalidProperties[] = "invalid value for 'manufacturerProductNumber', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['merchantProductNo'] === null) {
            $invalidProperties[] = "'merchantProductNo' can't be null";
        }
        if ((mb_strlen($this->container['merchantProductNo']) > 64)) {
            $invalidProperties[] = "invalid value for 'merchantProductNo', the character length must be smaller than or equal to 64.";
        }

        if ((mb_strlen($this->container['merchantProductNo']) < 0)) {
            $invalidProperties[] = "invalid value for 'merchantProductNo', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['stock']) && ($this->container['stock'] < 0)) {
            $invalidProperties[] = "invalid value for 'stock', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['price']) && ($this->container['price'] < 0)) {
            $invalidProperties[] = "invalid value for 'price', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['shippingTime']) && (mb_strlen($this->container['shippingTime']) > 128)) {
            $invalidProperties[] = "invalid value for 'shippingTime', the character length must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['shippingTime']) && (mb_strlen($this->container['shippingTime']) < 0)) {
            $invalidProperties[] = "invalid value for 'shippingTime', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['url']) && (mb_strlen($this->container['url']) > 512)) {
            $invalidProperties[] = "invalid value for 'url', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['url']) && (mb_strlen($this->container['url']) < 0)) {
            $invalidProperties[] = "invalid value for 'url', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['imageUrl']) && (mb_strlen($this->container['imageUrl']) > 512)) {
            $invalidProperties[] = "invalid value for 'imageUrl', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['imageUrl']) && (mb_strlen($this->container['imageUrl']) < 0)) {
            $invalidProperties[] = "invalid value for 'imageUrl', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['extraImageUrl1']) && (mb_strlen($this->container['extraImageUrl1']) > 512)) {
            $invalidProperties[] = "invalid value for 'extraImageUrl1', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['extraImageUrl1']) && (mb_strlen($this->container['extraImageUrl1']) < 0)) {
            $invalidProperties[] = "invalid value for 'extraImageUrl1', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['extraImageUrl2']) && (mb_strlen($this->container['extraImageUrl2']) > 512)) {
            $invalidProperties[] = "invalid value for 'extraImageUrl2', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['extraImageUrl2']) && (mb_strlen($this->container['extraImageUrl2']) < 0)) {
            $invalidProperties[] = "invalid value for 'extraImageUrl2', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['extraImageUrl3']) && (mb_strlen($this->container['extraImageUrl3']) > 512)) {
            $invalidProperties[] = "invalid value for 'extraImageUrl3', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['extraImageUrl3']) && (mb_strlen($this->container['extraImageUrl3']) < 0)) {
            $invalidProperties[] = "invalid value for 'extraImageUrl3', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['extraImageUrl4']) && (mb_strlen($this->container['extraImageUrl4']) > 512)) {
            $invalidProperties[] = "invalid value for 'extraImageUrl4', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['extraImageUrl4']) && (mb_strlen($this->container['extraImageUrl4']) < 0)) {
            $invalidProperties[] = "invalid value for 'extraImageUrl4', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['extraImageUrl5']) && (mb_strlen($this->container['extraImageUrl5']) > 512)) {
            $invalidProperties[] = "invalid value for 'extraImageUrl5', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['extraImageUrl5']) && (mb_strlen($this->container['extraImageUrl5']) < 0)) {
            $invalidProperties[] = "invalid value for 'extraImageUrl5', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['extraImageUrl6']) && (mb_strlen($this->container['extraImageUrl6']) > 512)) {
            $invalidProperties[] = "invalid value for 'extraImageUrl6', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['extraImageUrl6']) && (mb_strlen($this->container['extraImageUrl6']) < 0)) {
            $invalidProperties[] = "invalid value for 'extraImageUrl6', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['extraImageUrl7']) && (mb_strlen($this->container['extraImageUrl7']) > 512)) {
            $invalidProperties[] = "invalid value for 'extraImageUrl7', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['extraImageUrl7']) && (mb_strlen($this->container['extraImageUrl7']) < 0)) {
            $invalidProperties[] = "invalid value for 'extraImageUrl7', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['extraImageUrl8']) && (mb_strlen($this->container['extraImageUrl8']) > 512)) {
            $invalidProperties[] = "invalid value for 'extraImageUrl8', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['extraImageUrl8']) && (mb_strlen($this->container['extraImageUrl8']) < 0)) {
            $invalidProperties[] = "invalid value for 'extraImageUrl8', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['extraImageUrl9']) && (mb_strlen($this->container['extraImageUrl9']) > 512)) {
            $invalidProperties[] = "invalid value for 'extraImageUrl9', the character length must be smaller than or equal to 512.";
        }

        if (!is_null($this->container['extraImageUrl9']) && (mb_strlen($this->container['extraImageUrl9']) < 0)) {
            $invalidProperties[] = "invalid value for 'extraImageUrl9', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets isActive
     *
     * @return bool|null
     */
    public function getIsActive()
    {
        return $this->container['isActive'];
    }

    /**
     * Sets isActive
     *
     * @param bool|null $isActive Is the product active for the Merchant?.
     *
     * @return self
     */
    public function setIsActive($isActive)
    {
        $this->container['isActive'] = $isActive;

        return $this;
    }

    /**
     * Gets extraData
     *
     * @return \ChannelEngine\Merchant\ApiClient\Model\MerchantProductExtraDataItemResponse[]|null
     */
    public function getExtraData()
    {
        return $this->container['extraData'];
    }

    /**
     * Sets extraData
     *
     * @param \ChannelEngine\Merchant\ApiClient\Model\MerchantProductExtraDataItemResponse[]|null $extraData extraData
     *
     * @return self
     */
    public function setExtraData($extraData)
    {
        $this->container['extraData'] = $extraData;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The name of the product.
     *
     * @return self
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 256)) {
            throw new \InvalidArgumentException('invalid length for $name when calling MerchantProductResponse., must be smaller than or equal to 256.');
        }
        if (!is_null($name) && (mb_strlen($name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $name when calling MerchantProductResponse., must be bigger than or equal to 0.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description A description of the product. Can contain these HTML tags:  div, span, pre, p, br, hr, hgroup, h1, h2, h3, h4, h5, h6, ul, ol, li, dl, dt, dd, strong, em, b, i, u, img, a, abbr, address, blockquote, area, audio, video, caption, table, tbody, td, tfoot, th, thead, tr.
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets brand
     *
     * @return string|null
     */
    public function getBrand()
    {
        return $this->container['brand'];
    }

    /**
     * Sets brand
     *
     * @param string|null $brand The brand of the product.
     *
     * @return self
     */
    public function setBrand($brand)
    {
        if (!is_null($brand) && (mb_strlen($brand) > 256)) {
            throw new \InvalidArgumentException('invalid length for $brand when calling MerchantProductResponse., must be smaller than or equal to 256.');
        }
        if (!is_null($brand) && (mb_strlen($brand) < 0)) {
            throw new \InvalidArgumentException('invalid length for $brand when calling MerchantProductResponse., must be bigger than or equal to 0.');
        }

        $this->container['brand'] = $brand;

        return $this;
    }

    /**
     * Gets size
     *
     * @return string|null
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param string|null $size Optional. The size of the product (variant). E.g. fashion size (S-XL, 46-56, etc), width of the watch, etc..
     *
     * @return self
     */
    public function setSize($size)
    {
        if (!is_null($size) && (mb_strlen($size) > 64)) {
            throw new \InvalidArgumentException('invalid length for $size when calling MerchantProductResponse., must be smaller than or equal to 64.');
        }
        if (!is_null($size) && (mb_strlen($size) < 0)) {
            throw new \InvalidArgumentException('invalid length for $size when calling MerchantProductResponse., must be bigger than or equal to 0.');
        }

        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets color
     *
     * @return string|null
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param string|null $color Optional. The color of the product (variant).
     *
     * @return self
     */
    public function setColor($color)
    {
        if (!is_null($color) && (mb_strlen($color) > 64)) {
            throw new \InvalidArgumentException('invalid length for $color when calling MerchantProductResponse., must be smaller than or equal to 64.');
        }
        if (!is_null($color) && (mb_strlen($color) < 0)) {
            throw new \InvalidArgumentException('invalid length for $color when calling MerchantProductResponse., must be bigger than or equal to 0.');
        }

        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets ean
     *
     * @return string|null
     */
    public function getEan()
    {
        return $this->container['ean'];
    }

    /**
     * Sets ean
     *
     * @param string|null $ean The EAN of GTIN of the product.
     *
     * @return self
     */
    public function setEan($ean)
    {
        if (!is_null($ean) && (mb_strlen($ean) > 64)) {
            throw new \InvalidArgumentException('invalid length for $ean when calling MerchantProductResponse., must be smaller than or equal to 64.');
        }
        if (!is_null($ean) && (mb_strlen($ean) < 0)) {
            throw new \InvalidArgumentException('invalid length for $ean when calling MerchantProductResponse., must be bigger than or equal to 0.');
        }

        $this->container['ean'] = $ean;

        return $this;
    }

    /**
     * Gets manufacturerProductNumber
     *
     * @return string|null
     */
    public function getManufacturerProductNumber()
    {
        return $this->container['manufacturerProductNumber'];
    }

    /**
     * Sets manufacturerProductNumber
     *
     * @param string|null $manufacturerProductNumber The unique product reference used by the manufacturer/vendor of the product.
     *
     * @return self
     */
    public function setManufacturerProductNumber($manufacturerProductNumber)
    {
        if (!is_null($manufacturerProductNumber) && (mb_strlen($manufacturerProductNumber) > 64)) {
            throw new \InvalidArgumentException('invalid length for $manufacturerProductNumber when calling MerchantProductResponse., must be smaller than or equal to 64.');
        }
        if (!is_null($manufacturerProductNumber) && (mb_strlen($manufacturerProductNumber) < 0)) {
            throw new \InvalidArgumentException('invalid length for $manufacturerProductNumber when calling MerchantProductResponse., must be bigger than or equal to 0.');
        }

        $this->container['manufacturerProductNumber'] = $manufacturerProductNumber;

        return $this;
    }

    /**
     * Gets merchantProductNo
     *
     * @return string
     */
    public function getMerchantProductNo()
    {
        return $this->container['merchantProductNo'];
    }

    /**
     * Sets merchantProductNo
     *
     * @param string $merchantProductNo A unique identifier of the product. (sku).
     *
     * @return self
     */
    public function setMerchantProductNo($merchantProductNo)
    {
        if ((mb_strlen($merchantProductNo) > 64)) {
            throw new \InvalidArgumentException('invalid length for $merchantProductNo when calling MerchantProductResponse., must be smaller than or equal to 64.');
        }
        if ((mb_strlen($merchantProductNo) < 0)) {
            throw new \InvalidArgumentException('invalid length for $merchantProductNo when calling MerchantProductResponse., must be bigger than or equal to 0.');
        }

        $this->container['merchantProductNo'] = $merchantProductNo;

        return $this;
    }

    /**
     * Gets stock
     *
     * @return int|null
     */
    public function getStock()
    {
        return $this->container['stock'];
    }

    /**
     * Sets stock
     *
     * @param int|null $stock The number of items in stock.
     *
     * @return self
     */
    public function setStock($stock)
    {

        if (!is_null($stock) && ($stock < 0)) {
            throw new \InvalidArgumentException('invalid value for $stock when calling MerchantProductResponse., must be bigger than or equal to 0.');
        }

        $this->container['stock'] = $stock;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float|null $price Price, including VAT.
     *
     * @return self
     */
    public function setPrice($price)
    {

        if (!is_null($price) && ($price < 0)) {
            throw new \InvalidArgumentException('invalid value for $price when calling MerchantProductResponse., must be bigger than or equal to 0.');
        }

        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets mSRP
     *
     * @return float|null
     */
    public function getMSRP()
    {
        return $this->container['mSRP'];
    }

    /**
     * Sets mSRP
     *
     * @param float|null $mSRP Manufacturer's suggested retail price.
     *
     * @return self
     */
    public function setMSRP($mSRP)
    {
        $this->container['mSRP'] = $mSRP;

        return $this;
    }

    /**
     * Gets purchasePrice
     *
     * @return float|null
     */
    public function getPurchasePrice()
    {
        return $this->container['purchasePrice'];
    }

    /**
     * Sets purchasePrice
     *
     * @param float|null $purchasePrice Optional. The purchase price of the product. Useful for repricing.
     *
     * @return self
     */
    public function setPurchasePrice($purchasePrice)
    {
        $this->container['purchasePrice'] = $purchasePrice;

        return $this;
    }

    /**
     * Gets vatRateType
     *
     * @return \ChannelEngine\Merchant\ApiClient\Model\VatRateType|null
     */
    public function getVatRateType()
    {
        return $this->container['vatRateType'];
    }

    /**
     * Sets vatRateType
     *
     * @param \ChannelEngine\Merchant\ApiClient\Model\VatRateType|null $vatRateType vatRateType
     *
     * @return self
     */
    public function setVatRateType($vatRateType)
    {
        $this->container['vatRateType'] = $vatRateType;

        return $this;
    }

    /**
     * Gets shippingCost
     *
     * @return float|null
     */
    public function getShippingCost()
    {
        return $this->container['shippingCost'];
    }

    /**
     * Sets shippingCost
     *
     * @param float|null $shippingCost Shipping cost of the product.
     *
     * @return self
     */
    public function setShippingCost($shippingCost)
    {
        $this->container['shippingCost'] = $shippingCost;

        return $this;
    }

    /**
     * Gets shippingTime
     *
     * @return string|null
     */
    public function getShippingTime()
    {
        return $this->container['shippingTime'];
    }

    /**
     * Sets shippingTime
     *
     * @param string|null $shippingTime A textual representation of the shippingtime.  For example, in Dutch: 'Op werkdagen voor 22:00 uur besteld, morgen in huis'.
     *
     * @return self
     */
    public function setShippingTime($shippingTime)
    {
        if (!is_null($shippingTime) && (mb_strlen($shippingTime) > 128)) {
            throw new \InvalidArgumentException('invalid length for $shippingTime when calling MerchantProductResponse., must be smaller than or equal to 128.');
        }
        if (!is_null($shippingTime) && (mb_strlen($shippingTime) < 0)) {
            throw new \InvalidArgumentException('invalid length for $shippingTime when calling MerchantProductResponse., must be bigger than or equal to 0.');
        }

        $this->container['shippingTime'] = $shippingTime;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url A URL pointing to the merchant's webpage  which displays this product.
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (!is_null($url) && (mb_strlen($url) > 512)) {
            throw new \InvalidArgumentException('invalid length for $url when calling MerchantProductResponse., must be smaller than or equal to 512.');
        }
        if (!is_null($url) && (mb_strlen($url) < 0)) {
            throw new \InvalidArgumentException('invalid length for $url when calling MerchantProductResponse., must be bigger than or equal to 0.');
        }

        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets imageUrl
     *
     * @return string|null
     */
    public function getImageUrl()
    {
        return $this->container['imageUrl'];
    }

    /**
     * Sets imageUrl
     *
     * @param string|null $imageUrl A URL at which an image of this product  can be found.
     *
     * @return self
     */
    public function setImageUrl($imageUrl)
    {
        if (!is_null($imageUrl) && (mb_strlen($imageUrl) > 512)) {
            throw new \InvalidArgumentException('invalid length for $imageUrl when calling MerchantProductResponse., must be smaller than or equal to 512.');
        }
        if (!is_null($imageUrl) && (mb_strlen($imageUrl) < 0)) {
            throw new \InvalidArgumentException('invalid length for $imageUrl when calling MerchantProductResponse., must be bigger than or equal to 0.');
        }

        $this->container['imageUrl'] = $imageUrl;

        return $this;
    }

    /**
     * Gets extraImageUrl1
     *
     * @return string|null
     */
    public function getExtraImageUrl1()
    {
        return $this->container['extraImageUrl1'];
    }

    /**
     * Sets extraImageUrl1
     *
     * @param string|null $extraImageUrl1 Url to an additional image of product (1).
     *
     * @return self
     */
    public function setExtraImageUrl1($extraImageUrl1)
    {
        if (!is_null($extraImageUrl1) && (mb_strlen($extraImageUrl1) > 512)) {
            throw new \InvalidArgumentException('invalid length for $extraImageUrl1 when calling MerchantProductResponse., must be smaller than or equal to 512.');
        }
        if (!is_null($extraImageUrl1) && (mb_strlen($extraImageUrl1) < 0)) {
            throw new \InvalidArgumentException('invalid length for $extraImageUrl1 when calling MerchantProductResponse., must be bigger than or equal to 0.');
        }

        $this->container['extraImageUrl1'] = $extraImageUrl1;

        return $this;
    }

    /**
     * Gets extraImageUrl2
     *
     * @return string|null
     */
    public function getExtraImageUrl2()
    {
        return $this->container['extraImageUrl2'];
    }

    /**
     * Sets extraImageUrl2
     *
     * @param string|null $extraImageUrl2 Url to an additional image of product (2).
     *
     * @return self
     */
    public function setExtraImageUrl2($extraImageUrl2)
    {
        if (!is_null($extraImageUrl2) && (mb_strlen($extraImageUrl2) > 512)) {
            throw new \InvalidArgumentException('invalid length for $extraImageUrl2 when calling MerchantProductResponse., must be smaller than or equal to 512.');
        }
        if (!is_null($extraImageUrl2) && (mb_strlen($extraImageUrl2) < 0)) {
            throw new \InvalidArgumentException('invalid length for $extraImageUrl2 when calling MerchantProductResponse., must be bigger than or equal to 0.');
        }

        $this->container['extraImageUrl2'] = $extraImageUrl2;

        return $this;
    }

    /**
     * Gets extraImageUrl3
     *
     * @return string|null
     */
    public function getExtraImageUrl3()
    {
        return $this->container['extraImageUrl3'];
    }

    /**
     * Sets extraImageUrl3
     *
     * @param string|null $extraImageUrl3 Url to an additional image of product (3).
     *
     * @return self
     */
    public function setExtraImageUrl3($extraImageUrl3)
    {
        if (!is_null($extraImageUrl3) && (mb_strlen($extraImageUrl3) > 512)) {
            throw new \InvalidArgumentException('invalid length for $extraImageUrl3 when calling MerchantProductResponse., must be smaller than or equal to 512.');
        }
        if (!is_null($extraImageUrl3) && (mb_strlen($extraImageUrl3) < 0)) {
            throw new \InvalidArgumentException('invalid length for $extraImageUrl3 when calling MerchantProductResponse., must be bigger than or equal to 0.');
        }

        $this->container['extraImageUrl3'] = $extraImageUrl3;

        return $this;
    }

    /**
     * Gets extraImageUrl4
     *
     * @return string|null
     */
    public function getExtraImageUrl4()
    {
        return $this->container['extraImageUrl4'];
    }

    /**
     * Sets extraImageUrl4
     *
     * @param string|null $extraImageUrl4 Url to an additional image of product (4).
     *
     * @return self
     */
    public function setExtraImageUrl4($extraImageUrl4)
    {
        if (!is_null($extraImageUrl4) && (mb_strlen($extraImageUrl4) > 512)) {
            throw new \InvalidArgumentException('invalid length for $extraImageUrl4 when calling MerchantProductResponse., must be smaller than or equal to 512.');
        }
        if (!is_null($extraImageUrl4) && (mb_strlen($extraImageUrl4) < 0)) {
            throw new \InvalidArgumentException('invalid length for $extraImageUrl4 when calling MerchantProductResponse., must be bigger than or equal to 0.');
        }

        $this->container['extraImageUrl4'] = $extraImageUrl4;

        return $this;
    }

    /**
     * Gets extraImageUrl5
     *
     * @return string|null
     */
    public function getExtraImageUrl5()
    {
        return $this->container['extraImageUrl5'];
    }

    /**
     * Sets extraImageUrl5
     *
     * @param string|null $extraImageUrl5 Url to an additional image of product (5).
     *
     * @return self
     */
    public function setExtraImageUrl5($extraImageUrl5)
    {
        if (!is_null($extraImageUrl5) && (mb_strlen($extraImageUrl5) > 512)) {
            throw new \InvalidArgumentException('invalid length for $extraImageUrl5 when calling MerchantProductResponse., must be smaller than or equal to 512.');
        }
        if (!is_null($extraImageUrl5) && (mb_strlen($extraImageUrl5) < 0)) {
            throw new \InvalidArgumentException('invalid length for $extraImageUrl5 when calling MerchantProductResponse., must be bigger than or equal to 0.');
        }

        $this->container['extraImageUrl5'] = $extraImageUrl5;

        return $this;
    }

    /**
     * Gets extraImageUrl6
     *
     * @return string|null
     */
    public function getExtraImageUrl6()
    {
        return $this->container['extraImageUrl6'];
    }

    /**
     * Sets extraImageUrl6
     *
     * @param string|null $extraImageUrl6 Url to an additional image of product (6).
     *
     * @return self
     */
    public function setExtraImageUrl6($extraImageUrl6)
    {
        if (!is_null($extraImageUrl6) && (mb_strlen($extraImageUrl6) > 512)) {
            throw new \InvalidArgumentException('invalid length for $extraImageUrl6 when calling MerchantProductResponse., must be smaller than or equal to 512.');
        }
        if (!is_null($extraImageUrl6) && (mb_strlen($extraImageUrl6) < 0)) {
            throw new \InvalidArgumentException('invalid length for $extraImageUrl6 when calling MerchantProductResponse., must be bigger than or equal to 0.');
        }

        $this->container['extraImageUrl6'] = $extraImageUrl6;

        return $this;
    }

    /**
     * Gets extraImageUrl7
     *
     * @return string|null
     */
    public function getExtraImageUrl7()
    {
        return $this->container['extraImageUrl7'];
    }

    /**
     * Sets extraImageUrl7
     *
     * @param string|null $extraImageUrl7 Url to an additional image of product (7).
     *
     * @return self
     */
    public function setExtraImageUrl7($extraImageUrl7)
    {
        if (!is_null($extraImageUrl7) && (mb_strlen($extraImageUrl7) > 512)) {
            throw new \InvalidArgumentException('invalid length for $extraImageUrl7 when calling MerchantProductResponse., must be smaller than or equal to 512.');
        }
        if (!is_null($extraImageUrl7) && (mb_strlen($extraImageUrl7) < 0)) {
            throw new \InvalidArgumentException('invalid length for $extraImageUrl7 when calling MerchantProductResponse., must be bigger than or equal to 0.');
        }

        $this->container['extraImageUrl7'] = $extraImageUrl7;

        return $this;
    }

    /**
     * Gets extraImageUrl8
     *
     * @return string|null
     */
    public function getExtraImageUrl8()
    {
        return $this->container['extraImageUrl8'];
    }

    /**
     * Sets extraImageUrl8
     *
     * @param string|null $extraImageUrl8 Url to an additional image of product (8).
     *
     * @return self
     */
    public function setExtraImageUrl8($extraImageUrl8)
    {
        if (!is_null($extraImageUrl8) && (mb_strlen($extraImageUrl8) > 512)) {
            throw new \InvalidArgumentException('invalid length for $extraImageUrl8 when calling MerchantProductResponse., must be smaller than or equal to 512.');
        }
        if (!is_null($extraImageUrl8) && (mb_strlen($extraImageUrl8) < 0)) {
            throw new \InvalidArgumentException('invalid length for $extraImageUrl8 when calling MerchantProductResponse., must be bigger than or equal to 0.');
        }

        $this->container['extraImageUrl8'] = $extraImageUrl8;

        return $this;
    }

    /**
     * Gets extraImageUrl9
     *
     * @return string|null
     */
    public function getExtraImageUrl9()
    {
        return $this->container['extraImageUrl9'];
    }

    /**
     * Sets extraImageUrl9
     *
     * @param string|null $extraImageUrl9 Url to an additional image of product (9).
     *
     * @return self
     */
    public function setExtraImageUrl9($extraImageUrl9)
    {
        if (!is_null($extraImageUrl9) && (mb_strlen($extraImageUrl9) > 512)) {
            throw new \InvalidArgumentException('invalid length for $extraImageUrl9 when calling MerchantProductResponse., must be smaller than or equal to 512.');
        }
        if (!is_null($extraImageUrl9) && (mb_strlen($extraImageUrl9) < 0)) {
            throw new \InvalidArgumentException('invalid length for $extraImageUrl9 when calling MerchantProductResponse., must be bigger than or equal to 0.');
        }

        $this->container['extraImageUrl9'] = $extraImageUrl9;

        return $this;
    }

    /**
     * Gets categoryTrail
     *
     * @return string|null
     */
    public function getCategoryTrail()
    {
        return $this->container['categoryTrail'];
    }

    /**
     * Sets categoryTrail
     *
     * @param string|null $categoryTrail The category to which this product belongs.  Please supply this field in the following format:  'maincategory > category > subcategory'  For example:  'vehicles > bikes > mountainbike'.
     *
     * @return self
     */
    public function setCategoryTrail($categoryTrail)
    {
        $this->container['categoryTrail'] = $categoryTrail;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


