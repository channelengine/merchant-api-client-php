<?php
/**
 * MerchantReturnLineUpdateRequest
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  ChannelEngine\Merchant\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ChannelEngine Merchant API
 *
 * ChannelEngine API for merchants
 *
 * The version of the OpenAPI document: 2.13.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ChannelEngine\Merchant\ApiClient\Model;

use \ArrayAccess;
use \ChannelEngine\Merchant\ApiClient\ObjectSerializer;

/**
 * MerchantReturnLineUpdateRequest Class Doc Comment
 *
 * @category Class
 * @package  ChannelEngine\Merchant\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class MerchantReturnLineUpdateRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MerchantReturnLineUpdateRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'merchantProductNo' => 'string',
        'acceptedQuantity' => 'int',
        'rejectedQuantity' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'merchantProductNo' => null,
        'acceptedQuantity' => 'int32',
        'rejectedQuantity' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'merchantProductNo' => 'MerchantProductNo',
        'acceptedQuantity' => 'AcceptedQuantity',
        'rejectedQuantity' => 'RejectedQuantity'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'merchantProductNo' => 'setMerchantProductNo',
        'acceptedQuantity' => 'setAcceptedQuantity',
        'rejectedQuantity' => 'setRejectedQuantity'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'merchantProductNo' => 'getMerchantProductNo',
        'acceptedQuantity' => 'getAcceptedQuantity',
        'rejectedQuantity' => 'getRejectedQuantity'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['merchantProductNo'] = $data['merchantProductNo'] ?? null;
        $this->container['acceptedQuantity'] = $data['acceptedQuantity'] ?? null;
        $this->container['rejectedQuantity'] = $data['rejectedQuantity'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['merchantProductNo'] === null) {
            $invalidProperties[] = "'merchantProductNo' can't be null";
        }
        if ((mb_strlen($this->container['merchantProductNo']) > 64)) {
            $invalidProperties[] = "invalid value for 'merchantProductNo', the character length must be smaller than or equal to 64.";
        }

        if ((mb_strlen($this->container['merchantProductNo']) < 0)) {
            $invalidProperties[] = "invalid value for 'merchantProductNo', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['acceptedQuantity'] === null) {
            $invalidProperties[] = "'acceptedQuantity' can't be null";
        }
        if (($this->container['acceptedQuantity'] < 0)) {
            $invalidProperties[] = "invalid value for 'acceptedQuantity', must be bigger than or equal to 0.";
        }

        if ($this->container['rejectedQuantity'] === null) {
            $invalidProperties[] = "'rejectedQuantity' can't be null";
        }
        if (($this->container['rejectedQuantity'] < 0)) {
            $invalidProperties[] = "invalid value for 'rejectedQuantity', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets merchantProductNo
     *
     * @return string
     */
    public function getMerchantProductNo()
    {
        return $this->container['merchantProductNo'];
    }

    /**
     * Sets merchantProductNo
     *
     * @param string $merchantProductNo The unique product reference used by the Merchant (sku).
     *
     * @return self
     */
    public function setMerchantProductNo($merchantProductNo)
    {
        if ((mb_strlen($merchantProductNo) > 64)) {
            throw new \InvalidArgumentException('invalid length for $merchantProductNo when calling MerchantReturnLineUpdateRequest., must be smaller than or equal to 64.');
        }
        if ((mb_strlen($merchantProductNo) < 0)) {
            throw new \InvalidArgumentException('invalid length for $merchantProductNo when calling MerchantReturnLineUpdateRequest., must be bigger than or equal to 0.');
        }

        $this->container['merchantProductNo'] = $merchantProductNo;

        return $this;
    }

    /**
     * Gets acceptedQuantity
     *
     * @return int
     */
    public function getAcceptedQuantity()
    {
        return $this->container['acceptedQuantity'];
    }

    /**
     * Sets acceptedQuantity
     *
     * @param int $acceptedQuantity The amount of items that have been accepted.
     *
     * @return self
     */
    public function setAcceptedQuantity($acceptedQuantity)
    {

        if (($acceptedQuantity < 0)) {
            throw new \InvalidArgumentException('invalid value for $acceptedQuantity when calling MerchantReturnLineUpdateRequest., must be bigger than or equal to 0.');
        }

        $this->container['acceptedQuantity'] = $acceptedQuantity;

        return $this;
    }

    /**
     * Gets rejectedQuantity
     *
     * @return int
     */
    public function getRejectedQuantity()
    {
        return $this->container['rejectedQuantity'];
    }

    /**
     * Sets rejectedQuantity
     *
     * @param int $rejectedQuantity The amount of items that have been rejected.
     *
     * @return self
     */
    public function setRejectedQuantity($rejectedQuantity)
    {

        if (($rejectedQuantity < 0)) {
            throw new \InvalidArgumentException('invalid value for $rejectedQuantity when calling MerchantReturnLineUpdateRequest., must be bigger than or equal to 0.');
        }

        $this->container['rejectedQuantity'] = $rejectedQuantity;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


