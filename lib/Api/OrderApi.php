<?php
/**
 * OrderApi
 * PHP version 7.3
 *
 * @category Class
 * @package  ChannelEngine\Merchant\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ChannelEngine Merchant API
 *
 * ChannelEngine API for merchants
 *
 * The version of the OpenAPI document: 2.13.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ChannelEngine\Merchant\ApiClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use ChannelEngine\Merchant\ApiClient\ApiException;
use ChannelEngine\Merchant\ApiClient\Configuration;
use ChannelEngine\Merchant\ApiClient\HeaderSelector;
use ChannelEngine\Merchant\ApiClient\ObjectSerializer;

/**
 * OrderApi Class Doc Comment
 *
 * @category Class
 * @package  ChannelEngine\Merchant\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrderApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation orderAcknowledge
     *
     * Acknowledge Order.
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\MerchantOrderAcknowledgementRequest $merchantOrderAcknowledgementRequest Relations between the id&#39;s returned by ChannelEngine and the references which the merchant uses. (optional)
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse
     */
    public function orderAcknowledge($merchantOrderAcknowledgementRequest = null)
    {
        list($response) = $this->orderAcknowledgeWithHttpInfo($merchantOrderAcknowledgementRequest);
        return $response;
    }

    /**
     * Operation orderAcknowledgeWithHttpInfo
     *
     * Acknowledge Order.
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\MerchantOrderAcknowledgementRequest $merchantOrderAcknowledgementRequest Relations between the id&#39;s returned by ChannelEngine and the references which the merchant uses. (optional)
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderAcknowledgeWithHttpInfo($merchantOrderAcknowledgementRequest = null)
    {
        $request = $this->orderAcknowledgeRequest($merchantOrderAcknowledgementRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderAcknowledgeAsync
     *
     * Acknowledge Order.
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\MerchantOrderAcknowledgementRequest $merchantOrderAcknowledgementRequest Relations between the id&#39;s returned by ChannelEngine and the references which the merchant uses. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderAcknowledgeAsync($merchantOrderAcknowledgementRequest = null)
    {
        return $this->orderAcknowledgeAsyncWithHttpInfo($merchantOrderAcknowledgementRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderAcknowledgeAsyncWithHttpInfo
     *
     * Acknowledge Order.
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\MerchantOrderAcknowledgementRequest $merchantOrderAcknowledgementRequest Relations between the id&#39;s returned by ChannelEngine and the references which the merchant uses. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderAcknowledgeAsyncWithHttpInfo($merchantOrderAcknowledgementRequest = null)
    {
        $returnType = '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse';
        $request = $this->orderAcknowledgeRequest($merchantOrderAcknowledgementRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderAcknowledge'
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\MerchantOrderAcknowledgementRequest $merchantOrderAcknowledgementRequest Relations between the id&#39;s returned by ChannelEngine and the references which the merchant uses. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderAcknowledgeRequest($merchantOrderAcknowledgementRequest = null)
    {

        $resourcePath = '/v2/orders/acknowledge';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json-patch+json', 'application/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($merchantOrderAcknowledgementRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($merchantOrderAcknowledgementRequest));
            } else {
                $httpBody = $merchantOrderAcknowledgementRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderGetByFilter
     *
     * Get Orders By Filter.
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\OrderStatusView[] $statuses Order status(es) to filter on. AWAITING_PAYMENT orders will be excluded if it is not included in this Statuses filter. (optional)
     * @param  string[] $emailAddresses Client emailaddresses to filter on. (optional)
     * @param  string[] $merchantOrderNos Filter on unique order reference used by the merchant. (optional)
     * @param  string[] $channelOrderNos Filter on unique order reference used by the channel. (optional)
     * @param  \DateTime $fromDate Filter on the order date, starting from this date. This date is inclusive.&lt;br /&gt;The order date is based on the data we got from a channel. (optional)
     * @param  \DateTime $toDate Filter on the order date, until this date. This date is exclusive.&lt;br /&gt;The order date is based on the data we got from a channel. (optional)
     * @param  \DateTime $fromCreatedAtDate Filter on the created at date in ChannelEngine, starting from this date. This date is inclusive.&lt;br /&gt;The created date is set on the date and time when the order is created. (optional)
     * @param  \DateTime $toCreatedAtDate Filter on the created at date in ChannelEngine, until this date. This date is exclusive.&lt;br /&gt;The created date is set on the date and time when the order is created. (optional)
     * @param  bool $excludeMarketplaceFulfilledOrdersAndLines Exclude order (lines) fulfilled by the marketplace (amazon:FBA, bol:LVB, etc.) (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\FulfillmentType $fulfillmentType Filter orders on fulfillment type. This will include all orders lines, even if they are partially fulfilled by the marketplace.&lt;br /&gt;To exclude orders and lines that are fulfilled by the marketplace from the response, set ExcludeMarketplaceFulfilledOrdersAndLines to true. (optional)
     * @param  bool $onlyWithCancellationRequests Filter on orders containing cancellation requests.&lt;br /&gt;Some channels allow a customer to cancel an order until it has been shipped.&lt;br /&gt;When an order has already been acknowledged in ChannelEngine, it can only be cancelled by creating a cancellation. (optional)
     * @param  int[] $channelIds Filter orders on channel(s). (optional)
     * @param  int[] $stockLocationIds Filter on stock locations (optional)
     * @param  bool $isAcknowledged Filter on acknowledged value (optional)
     * @param  \DateTime $fromUpdatedAtDate Filter on the order update date, starting from this date. This date is inclusive. (optional)
     * @param  \DateTime $toUpdatedAtDate Filter on the order update date, unitl this date. This date is exclusive. (optional)
     * @param  \DateTime $fromAcknowledgedDate Filter on the order acknowledged date, starting from this date. This date is inclusive. (optional)
     * @param  \DateTime $toAcknowledgedDate Filter on the order acknowledged date, unitl this date. This date is exclusive. (optional)
     * @param  int $page The page to filter on. Starts at 1. (optional)
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantOrderResponse
     */
    public function orderGetByFilter($statuses = null, $emailAddresses = null, $merchantOrderNos = null, $channelOrderNos = null, $fromDate = null, $toDate = null, $fromCreatedAtDate = null, $toCreatedAtDate = null, $excludeMarketplaceFulfilledOrdersAndLines = null, $fulfillmentType = null, $onlyWithCancellationRequests = null, $channelIds = null, $stockLocationIds = null, $isAcknowledged = null, $fromUpdatedAtDate = null, $toUpdatedAtDate = null, $fromAcknowledgedDate = null, $toAcknowledgedDate = null, $page = null)
    {
        list($response) = $this->orderGetByFilterWithHttpInfo($statuses, $emailAddresses, $merchantOrderNos, $channelOrderNos, $fromDate, $toDate, $fromCreatedAtDate, $toCreatedAtDate, $excludeMarketplaceFulfilledOrdersAndLines, $fulfillmentType, $onlyWithCancellationRequests, $channelIds, $stockLocationIds, $isAcknowledged, $fromUpdatedAtDate, $toUpdatedAtDate, $fromAcknowledgedDate, $toAcknowledgedDate, $page);
        return $response;
    }

    /**
     * Operation orderGetByFilterWithHttpInfo
     *
     * Get Orders By Filter.
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\OrderStatusView[] $statuses Order status(es) to filter on. AWAITING_PAYMENT orders will be excluded if it is not included in this Statuses filter. (optional)
     * @param  string[] $emailAddresses Client emailaddresses to filter on. (optional)
     * @param  string[] $merchantOrderNos Filter on unique order reference used by the merchant. (optional)
     * @param  string[] $channelOrderNos Filter on unique order reference used by the channel. (optional)
     * @param  \DateTime $fromDate Filter on the order date, starting from this date. This date is inclusive.&lt;br /&gt;The order date is based on the data we got from a channel. (optional)
     * @param  \DateTime $toDate Filter on the order date, until this date. This date is exclusive.&lt;br /&gt;The order date is based on the data we got from a channel. (optional)
     * @param  \DateTime $fromCreatedAtDate Filter on the created at date in ChannelEngine, starting from this date. This date is inclusive.&lt;br /&gt;The created date is set on the date and time when the order is created. (optional)
     * @param  \DateTime $toCreatedAtDate Filter on the created at date in ChannelEngine, until this date. This date is exclusive.&lt;br /&gt;The created date is set on the date and time when the order is created. (optional)
     * @param  bool $excludeMarketplaceFulfilledOrdersAndLines Exclude order (lines) fulfilled by the marketplace (amazon:FBA, bol:LVB, etc.) (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\FulfillmentType $fulfillmentType Filter orders on fulfillment type. This will include all orders lines, even if they are partially fulfilled by the marketplace.&lt;br /&gt;To exclude orders and lines that are fulfilled by the marketplace from the response, set ExcludeMarketplaceFulfilledOrdersAndLines to true. (optional)
     * @param  bool $onlyWithCancellationRequests Filter on orders containing cancellation requests.&lt;br /&gt;Some channels allow a customer to cancel an order until it has been shipped.&lt;br /&gt;When an order has already been acknowledged in ChannelEngine, it can only be cancelled by creating a cancellation. (optional)
     * @param  int[] $channelIds Filter orders on channel(s). (optional)
     * @param  int[] $stockLocationIds Filter on stock locations (optional)
     * @param  bool $isAcknowledged Filter on acknowledged value (optional)
     * @param  \DateTime $fromUpdatedAtDate Filter on the order update date, starting from this date. This date is inclusive. (optional)
     * @param  \DateTime $toUpdatedAtDate Filter on the order update date, unitl this date. This date is exclusive. (optional)
     * @param  \DateTime $fromAcknowledgedDate Filter on the order acknowledged date, starting from this date. This date is inclusive. (optional)
     * @param  \DateTime $toAcknowledgedDate Filter on the order acknowledged date, unitl this date. This date is exclusive. (optional)
     * @param  int $page The page to filter on. Starts at 1. (optional)
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantOrderResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderGetByFilterWithHttpInfo($statuses = null, $emailAddresses = null, $merchantOrderNos = null, $channelOrderNos = null, $fromDate = null, $toDate = null, $fromCreatedAtDate = null, $toCreatedAtDate = null, $excludeMarketplaceFulfilledOrdersAndLines = null, $fulfillmentType = null, $onlyWithCancellationRequests = null, $channelIds = null, $stockLocationIds = null, $isAcknowledged = null, $fromUpdatedAtDate = null, $toUpdatedAtDate = null, $fromAcknowledgedDate = null, $toAcknowledgedDate = null, $page = null)
    {
        $request = $this->orderGetByFilterRequest($statuses, $emailAddresses, $merchantOrderNos, $channelOrderNos, $fromDate, $toDate, $fromCreatedAtDate, $toCreatedAtDate, $excludeMarketplaceFulfilledOrdersAndLines, $fulfillmentType, $onlyWithCancellationRequests, $channelIds, $stockLocationIds, $isAcknowledged, $fromUpdatedAtDate, $toUpdatedAtDate, $fromAcknowledgedDate, $toAcknowledgedDate, $page);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantOrderResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantOrderResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantOrderResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantOrderResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderGetByFilterAsync
     *
     * Get Orders By Filter.
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\OrderStatusView[] $statuses Order status(es) to filter on. AWAITING_PAYMENT orders will be excluded if it is not included in this Statuses filter. (optional)
     * @param  string[] $emailAddresses Client emailaddresses to filter on. (optional)
     * @param  string[] $merchantOrderNos Filter on unique order reference used by the merchant. (optional)
     * @param  string[] $channelOrderNos Filter on unique order reference used by the channel. (optional)
     * @param  \DateTime $fromDate Filter on the order date, starting from this date. This date is inclusive.&lt;br /&gt;The order date is based on the data we got from a channel. (optional)
     * @param  \DateTime $toDate Filter on the order date, until this date. This date is exclusive.&lt;br /&gt;The order date is based on the data we got from a channel. (optional)
     * @param  \DateTime $fromCreatedAtDate Filter on the created at date in ChannelEngine, starting from this date. This date is inclusive.&lt;br /&gt;The created date is set on the date and time when the order is created. (optional)
     * @param  \DateTime $toCreatedAtDate Filter on the created at date in ChannelEngine, until this date. This date is exclusive.&lt;br /&gt;The created date is set on the date and time when the order is created. (optional)
     * @param  bool $excludeMarketplaceFulfilledOrdersAndLines Exclude order (lines) fulfilled by the marketplace (amazon:FBA, bol:LVB, etc.) (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\FulfillmentType $fulfillmentType Filter orders on fulfillment type. This will include all orders lines, even if they are partially fulfilled by the marketplace.&lt;br /&gt;To exclude orders and lines that are fulfilled by the marketplace from the response, set ExcludeMarketplaceFulfilledOrdersAndLines to true. (optional)
     * @param  bool $onlyWithCancellationRequests Filter on orders containing cancellation requests.&lt;br /&gt;Some channels allow a customer to cancel an order until it has been shipped.&lt;br /&gt;When an order has already been acknowledged in ChannelEngine, it can only be cancelled by creating a cancellation. (optional)
     * @param  int[] $channelIds Filter orders on channel(s). (optional)
     * @param  int[] $stockLocationIds Filter on stock locations (optional)
     * @param  bool $isAcknowledged Filter on acknowledged value (optional)
     * @param  \DateTime $fromUpdatedAtDate Filter on the order update date, starting from this date. This date is inclusive. (optional)
     * @param  \DateTime $toUpdatedAtDate Filter on the order update date, unitl this date. This date is exclusive. (optional)
     * @param  \DateTime $fromAcknowledgedDate Filter on the order acknowledged date, starting from this date. This date is inclusive. (optional)
     * @param  \DateTime $toAcknowledgedDate Filter on the order acknowledged date, unitl this date. This date is exclusive. (optional)
     * @param  int $page The page to filter on. Starts at 1. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderGetByFilterAsync($statuses = null, $emailAddresses = null, $merchantOrderNos = null, $channelOrderNos = null, $fromDate = null, $toDate = null, $fromCreatedAtDate = null, $toCreatedAtDate = null, $excludeMarketplaceFulfilledOrdersAndLines = null, $fulfillmentType = null, $onlyWithCancellationRequests = null, $channelIds = null, $stockLocationIds = null, $isAcknowledged = null, $fromUpdatedAtDate = null, $toUpdatedAtDate = null, $fromAcknowledgedDate = null, $toAcknowledgedDate = null, $page = null)
    {
        return $this->orderGetByFilterAsyncWithHttpInfo($statuses, $emailAddresses, $merchantOrderNos, $channelOrderNos, $fromDate, $toDate, $fromCreatedAtDate, $toCreatedAtDate, $excludeMarketplaceFulfilledOrdersAndLines, $fulfillmentType, $onlyWithCancellationRequests, $channelIds, $stockLocationIds, $isAcknowledged, $fromUpdatedAtDate, $toUpdatedAtDate, $fromAcknowledgedDate, $toAcknowledgedDate, $page)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderGetByFilterAsyncWithHttpInfo
     *
     * Get Orders By Filter.
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\OrderStatusView[] $statuses Order status(es) to filter on. AWAITING_PAYMENT orders will be excluded if it is not included in this Statuses filter. (optional)
     * @param  string[] $emailAddresses Client emailaddresses to filter on. (optional)
     * @param  string[] $merchantOrderNos Filter on unique order reference used by the merchant. (optional)
     * @param  string[] $channelOrderNos Filter on unique order reference used by the channel. (optional)
     * @param  \DateTime $fromDate Filter on the order date, starting from this date. This date is inclusive.&lt;br /&gt;The order date is based on the data we got from a channel. (optional)
     * @param  \DateTime $toDate Filter on the order date, until this date. This date is exclusive.&lt;br /&gt;The order date is based on the data we got from a channel. (optional)
     * @param  \DateTime $fromCreatedAtDate Filter on the created at date in ChannelEngine, starting from this date. This date is inclusive.&lt;br /&gt;The created date is set on the date and time when the order is created. (optional)
     * @param  \DateTime $toCreatedAtDate Filter on the created at date in ChannelEngine, until this date. This date is exclusive.&lt;br /&gt;The created date is set on the date and time when the order is created. (optional)
     * @param  bool $excludeMarketplaceFulfilledOrdersAndLines Exclude order (lines) fulfilled by the marketplace (amazon:FBA, bol:LVB, etc.) (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\FulfillmentType $fulfillmentType Filter orders on fulfillment type. This will include all orders lines, even if they are partially fulfilled by the marketplace.&lt;br /&gt;To exclude orders and lines that are fulfilled by the marketplace from the response, set ExcludeMarketplaceFulfilledOrdersAndLines to true. (optional)
     * @param  bool $onlyWithCancellationRequests Filter on orders containing cancellation requests.&lt;br /&gt;Some channels allow a customer to cancel an order until it has been shipped.&lt;br /&gt;When an order has already been acknowledged in ChannelEngine, it can only be cancelled by creating a cancellation. (optional)
     * @param  int[] $channelIds Filter orders on channel(s). (optional)
     * @param  int[] $stockLocationIds Filter on stock locations (optional)
     * @param  bool $isAcknowledged Filter on acknowledged value (optional)
     * @param  \DateTime $fromUpdatedAtDate Filter on the order update date, starting from this date. This date is inclusive. (optional)
     * @param  \DateTime $toUpdatedAtDate Filter on the order update date, unitl this date. This date is exclusive. (optional)
     * @param  \DateTime $fromAcknowledgedDate Filter on the order acknowledged date, starting from this date. This date is inclusive. (optional)
     * @param  \DateTime $toAcknowledgedDate Filter on the order acknowledged date, unitl this date. This date is exclusive. (optional)
     * @param  int $page The page to filter on. Starts at 1. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderGetByFilterAsyncWithHttpInfo($statuses = null, $emailAddresses = null, $merchantOrderNos = null, $channelOrderNos = null, $fromDate = null, $toDate = null, $fromCreatedAtDate = null, $toCreatedAtDate = null, $excludeMarketplaceFulfilledOrdersAndLines = null, $fulfillmentType = null, $onlyWithCancellationRequests = null, $channelIds = null, $stockLocationIds = null, $isAcknowledged = null, $fromUpdatedAtDate = null, $toUpdatedAtDate = null, $fromAcknowledgedDate = null, $toAcknowledgedDate = null, $page = null)
    {
        $returnType = '\ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantOrderResponse';
        $request = $this->orderGetByFilterRequest($statuses, $emailAddresses, $merchantOrderNos, $channelOrderNos, $fromDate, $toDate, $fromCreatedAtDate, $toCreatedAtDate, $excludeMarketplaceFulfilledOrdersAndLines, $fulfillmentType, $onlyWithCancellationRequests, $channelIds, $stockLocationIds, $isAcknowledged, $fromUpdatedAtDate, $toUpdatedAtDate, $fromAcknowledgedDate, $toAcknowledgedDate, $page);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderGetByFilter'
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\OrderStatusView[] $statuses Order status(es) to filter on. AWAITING_PAYMENT orders will be excluded if it is not included in this Statuses filter. (optional)
     * @param  string[] $emailAddresses Client emailaddresses to filter on. (optional)
     * @param  string[] $merchantOrderNos Filter on unique order reference used by the merchant. (optional)
     * @param  string[] $channelOrderNos Filter on unique order reference used by the channel. (optional)
     * @param  \DateTime $fromDate Filter on the order date, starting from this date. This date is inclusive.&lt;br /&gt;The order date is based on the data we got from a channel. (optional)
     * @param  \DateTime $toDate Filter on the order date, until this date. This date is exclusive.&lt;br /&gt;The order date is based on the data we got from a channel. (optional)
     * @param  \DateTime $fromCreatedAtDate Filter on the created at date in ChannelEngine, starting from this date. This date is inclusive.&lt;br /&gt;The created date is set on the date and time when the order is created. (optional)
     * @param  \DateTime $toCreatedAtDate Filter on the created at date in ChannelEngine, until this date. This date is exclusive.&lt;br /&gt;The created date is set on the date and time when the order is created. (optional)
     * @param  bool $excludeMarketplaceFulfilledOrdersAndLines Exclude order (lines) fulfilled by the marketplace (amazon:FBA, bol:LVB, etc.) (optional)
     * @param  \ChannelEngine\Merchant\ApiClient\Model\FulfillmentType $fulfillmentType Filter orders on fulfillment type. This will include all orders lines, even if they are partially fulfilled by the marketplace.&lt;br /&gt;To exclude orders and lines that are fulfilled by the marketplace from the response, set ExcludeMarketplaceFulfilledOrdersAndLines to true. (optional)
     * @param  bool $onlyWithCancellationRequests Filter on orders containing cancellation requests.&lt;br /&gt;Some channels allow a customer to cancel an order until it has been shipped.&lt;br /&gt;When an order has already been acknowledged in ChannelEngine, it can only be cancelled by creating a cancellation. (optional)
     * @param  int[] $channelIds Filter orders on channel(s). (optional)
     * @param  int[] $stockLocationIds Filter on stock locations (optional)
     * @param  bool $isAcknowledged Filter on acknowledged value (optional)
     * @param  \DateTime $fromUpdatedAtDate Filter on the order update date, starting from this date. This date is inclusive. (optional)
     * @param  \DateTime $toUpdatedAtDate Filter on the order update date, unitl this date. This date is exclusive. (optional)
     * @param  \DateTime $fromAcknowledgedDate Filter on the order acknowledged date, starting from this date. This date is inclusive. (optional)
     * @param  \DateTime $toAcknowledgedDate Filter on the order acknowledged date, unitl this date. This date is exclusive. (optional)
     * @param  int $page The page to filter on. Starts at 1. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderGetByFilterRequest($statuses = null, $emailAddresses = null, $merchantOrderNos = null, $channelOrderNos = null, $fromDate = null, $toDate = null, $fromCreatedAtDate = null, $toCreatedAtDate = null, $excludeMarketplaceFulfilledOrdersAndLines = null, $fulfillmentType = null, $onlyWithCancellationRequests = null, $channelIds = null, $stockLocationIds = null, $isAcknowledged = null, $fromUpdatedAtDate = null, $toUpdatedAtDate = null, $fromAcknowledgedDate = null, $toAcknowledgedDate = null, $page = null)
    {

        $resourcePath = '/v2/orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($statuses !== null) {
            if('form' === 'form' && is_array($statuses)) {
                foreach($statuses as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['statuses'] = $statuses;
            }
        }
        // query params
        if ($emailAddresses !== null) {
            if('form' === 'form' && is_array($emailAddresses)) {
                foreach($emailAddresses as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['emailAddresses'] = $emailAddresses;
            }
        }
        // query params
        if ($merchantOrderNos !== null) {
            if('form' === 'form' && is_array($merchantOrderNos)) {
                foreach($merchantOrderNos as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['merchantOrderNos'] = $merchantOrderNos;
            }
        }
        // query params
        if ($channelOrderNos !== null) {
            if('form' === 'form' && is_array($channelOrderNos)) {
                foreach($channelOrderNos as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['channelOrderNos'] = $channelOrderNos;
            }
        }
        // query params
        if ($fromDate !== null) {
            if('form' === 'form' && is_array($fromDate)) {
                foreach($fromDate as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['fromDate'] = $fromDate;
            }
        }
        // query params
        if ($toDate !== null) {
            if('form' === 'form' && is_array($toDate)) {
                foreach($toDate as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['toDate'] = $toDate;
            }
        }
        // query params
        if ($fromCreatedAtDate !== null) {
            if('form' === 'form' && is_array($fromCreatedAtDate)) {
                foreach($fromCreatedAtDate as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['fromCreatedAtDate'] = $fromCreatedAtDate;
            }
        }
        // query params
        if ($toCreatedAtDate !== null) {
            if('form' === 'form' && is_array($toCreatedAtDate)) {
                foreach($toCreatedAtDate as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['toCreatedAtDate'] = $toCreatedAtDate;
            }
        }
        // query params
        if ($excludeMarketplaceFulfilledOrdersAndLines !== null) {
            if('form' === 'form' && is_array($excludeMarketplaceFulfilledOrdersAndLines)) {
                foreach($excludeMarketplaceFulfilledOrdersAndLines as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['excludeMarketplaceFulfilledOrdersAndLines'] = $excludeMarketplaceFulfilledOrdersAndLines;
            }
        }
        // query params
        if ($fulfillmentType !== null) {
            if('form' === 'form' && is_array($fulfillmentType)) {
                foreach($fulfillmentType as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['fulfillmentType'] = $fulfillmentType;
            }
        }
        // query params
        if ($onlyWithCancellationRequests !== null) {
            if('form' === 'form' && is_array($onlyWithCancellationRequests)) {
                foreach($onlyWithCancellationRequests as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['onlyWithCancellationRequests'] = $onlyWithCancellationRequests;
            }
        }
        // query params
        if ($channelIds !== null) {
            if('form' === 'form' && is_array($channelIds)) {
                foreach($channelIds as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['channelIds'] = $channelIds;
            }
        }
        // query params
        if ($stockLocationIds !== null) {
            if('form' === 'form' && is_array($stockLocationIds)) {
                foreach($stockLocationIds as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['stockLocationIds'] = $stockLocationIds;
            }
        }
        // query params
        if ($isAcknowledged !== null) {
            if('form' === 'form' && is_array($isAcknowledged)) {
                foreach($isAcknowledged as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['isAcknowledged'] = $isAcknowledged;
            }
        }
        // query params
        if ($fromUpdatedAtDate !== null) {
            if('form' === 'form' && is_array($fromUpdatedAtDate)) {
                foreach($fromUpdatedAtDate as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['fromUpdatedAtDate'] = $fromUpdatedAtDate;
            }
        }
        // query params
        if ($toUpdatedAtDate !== null) {
            if('form' === 'form' && is_array($toUpdatedAtDate)) {
                foreach($toUpdatedAtDate as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['toUpdatedAtDate'] = $toUpdatedAtDate;
            }
        }
        // query params
        if ($fromAcknowledgedDate !== null) {
            if('form' === 'form' && is_array($fromAcknowledgedDate)) {
                foreach($fromAcknowledgedDate as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['fromAcknowledgedDate'] = $fromAcknowledgedDate;
            }
        }
        // query params
        if ($toAcknowledgedDate !== null) {
            if('form' === 'form' && is_array($toAcknowledgedDate)) {
                foreach($toAcknowledgedDate as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['toAcknowledgedDate'] = $toAcknowledgedDate;
            }
        }
        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderGetNew
     *
     * Get New Orders.
     *
     * @param  int $stockLocationId The ChannelEngine id of the stock location. (optional)
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantOrderResponse
     */
    public function orderGetNew($stockLocationId = null)
    {
        list($response) = $this->orderGetNewWithHttpInfo($stockLocationId);
        return $response;
    }

    /**
     * Operation orderGetNewWithHttpInfo
     *
     * Get New Orders.
     *
     * @param  int $stockLocationId The ChannelEngine id of the stock location. (optional)
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantOrderResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderGetNewWithHttpInfo($stockLocationId = null)
    {
        $request = $this->orderGetNewRequest($stockLocationId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantOrderResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantOrderResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantOrderResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantOrderResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderGetNewAsync
     *
     * Get New Orders.
     *
     * @param  int $stockLocationId The ChannelEngine id of the stock location. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderGetNewAsync($stockLocationId = null)
    {
        return $this->orderGetNewAsyncWithHttpInfo($stockLocationId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderGetNewAsyncWithHttpInfo
     *
     * Get New Orders.
     *
     * @param  int $stockLocationId The ChannelEngine id of the stock location. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderGetNewAsyncWithHttpInfo($stockLocationId = null)
    {
        $returnType = '\ChannelEngine\Merchant\ApiClient\Model\CollectionOfMerchantOrderResponse';
        $request = $this->orderGetNewRequest($stockLocationId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderGetNew'
     *
     * @param  int $stockLocationId The ChannelEngine id of the stock location. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderGetNewRequest($stockLocationId = null)
    {

        $resourcePath = '/v2/orders/new';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($stockLocationId !== null) {
            if('form' === 'form' && is_array($stockLocationId)) {
                foreach($stockLocationId as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['stockLocationId'] = $stockLocationId;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderInvoice
     *
     * Download Invoice.
     *
     * @param  string $merchantOrderNo The unique order reference as used by the merchant. (required)
     * @param  bool $useCustomerCulture Generate the invoice in the billing address&#39; country&#39;s language. (optional, default to false)
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse
     */
    public function orderInvoice($merchantOrderNo, $useCustomerCulture = false)
    {
        list($response) = $this->orderInvoiceWithHttpInfo($merchantOrderNo, $useCustomerCulture);
        return $response;
    }

    /**
     * Operation orderInvoiceWithHttpInfo
     *
     * Download Invoice.
     *
     * @param  string $merchantOrderNo The unique order reference as used by the merchant. (required)
     * @param  bool $useCustomerCulture Generate the invoice in the billing address&#39; country&#39;s language. (optional, default to false)
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderInvoiceWithHttpInfo($merchantOrderNo, $useCustomerCulture = false)
    {
        $request = $this->orderInvoiceRequest($merchantOrderNo, $useCustomerCulture);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderInvoiceAsync
     *
     * Download Invoice.
     *
     * @param  string $merchantOrderNo The unique order reference as used by the merchant. (required)
     * @param  bool $useCustomerCulture Generate the invoice in the billing address&#39; country&#39;s language. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderInvoiceAsync($merchantOrderNo, $useCustomerCulture = false)
    {
        return $this->orderInvoiceAsyncWithHttpInfo($merchantOrderNo, $useCustomerCulture)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderInvoiceAsyncWithHttpInfo
     *
     * Download Invoice.
     *
     * @param  string $merchantOrderNo The unique order reference as used by the merchant. (required)
     * @param  bool $useCustomerCulture Generate the invoice in the billing address&#39; country&#39;s language. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderInvoiceAsyncWithHttpInfo($merchantOrderNo, $useCustomerCulture = false)
    {
        $returnType = '\SplFileObject';
        $request = $this->orderInvoiceRequest($merchantOrderNo, $useCustomerCulture);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderInvoice'
     *
     * @param  string $merchantOrderNo The unique order reference as used by the merchant. (required)
     * @param  bool $useCustomerCulture Generate the invoice in the billing address&#39; country&#39;s language. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderInvoiceRequest($merchantOrderNo, $useCustomerCulture = false)
    {
        // verify the required parameter 'merchantOrderNo' is set
        if ($merchantOrderNo === null || (is_array($merchantOrderNo) && count($merchantOrderNo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchantOrderNo when calling orderInvoice'
            );
        }

        $resourcePath = '/v2/orders/{merchantOrderNo}/invoice';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($useCustomerCulture !== null) {
            if('form' === 'form' && is_array($useCustomerCulture)) {
                foreach($useCustomerCulture as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['useCustomerCulture'] = $useCustomerCulture;
            }
        }


        // path params
        if ($merchantOrderNo !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantOrderNo' . '}',
                ObjectSerializer::toPathValue($merchantOrderNo),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/pdf', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/pdf', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderPackingSlip
     *
     * Download Packing Slip.
     *
     * @param  string $merchantOrderNo The unique order reference as used by the merchant. (required)
     * @param  bool $useCustomerCulture Generate the invoice in the billing address&#39; country&#39;s language. (optional, default to false)
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse
     */
    public function orderPackingSlip($merchantOrderNo, $useCustomerCulture = false)
    {
        list($response) = $this->orderPackingSlipWithHttpInfo($merchantOrderNo, $useCustomerCulture);
        return $response;
    }

    /**
     * Operation orderPackingSlipWithHttpInfo
     *
     * Download Packing Slip.
     *
     * @param  string $merchantOrderNo The unique order reference as used by the merchant. (required)
     * @param  bool $useCustomerCulture Generate the invoice in the billing address&#39; country&#39;s language. (optional, default to false)
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderPackingSlipWithHttpInfo($merchantOrderNo, $useCustomerCulture = false)
    {
        $request = $this->orderPackingSlipRequest($merchantOrderNo, $useCustomerCulture);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderPackingSlipAsync
     *
     * Download Packing Slip.
     *
     * @param  string $merchantOrderNo The unique order reference as used by the merchant. (required)
     * @param  bool $useCustomerCulture Generate the invoice in the billing address&#39; country&#39;s language. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderPackingSlipAsync($merchantOrderNo, $useCustomerCulture = false)
    {
        return $this->orderPackingSlipAsyncWithHttpInfo($merchantOrderNo, $useCustomerCulture)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderPackingSlipAsyncWithHttpInfo
     *
     * Download Packing Slip.
     *
     * @param  string $merchantOrderNo The unique order reference as used by the merchant. (required)
     * @param  bool $useCustomerCulture Generate the invoice in the billing address&#39; country&#39;s language. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderPackingSlipAsyncWithHttpInfo($merchantOrderNo, $useCustomerCulture = false)
    {
        $returnType = '\SplFileObject';
        $request = $this->orderPackingSlipRequest($merchantOrderNo, $useCustomerCulture);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderPackingSlip'
     *
     * @param  string $merchantOrderNo The unique order reference as used by the merchant. (required)
     * @param  bool $useCustomerCulture Generate the invoice in the billing address&#39; country&#39;s language. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderPackingSlipRequest($merchantOrderNo, $useCustomerCulture = false)
    {
        // verify the required parameter 'merchantOrderNo' is set
        if ($merchantOrderNo === null || (is_array($merchantOrderNo) && count($merchantOrderNo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchantOrderNo when calling orderPackingSlip'
            );
        }

        $resourcePath = '/v2/orders/{merchantOrderNo}/packingslip';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($useCustomerCulture !== null) {
            if('form' === 'form' && is_array($useCustomerCulture)) {
                foreach($useCustomerCulture as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['useCustomerCulture'] = $useCustomerCulture;
            }
        }


        // path params
        if ($merchantOrderNo !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantOrderNo' . '}',
                ObjectSerializer::toPathValue($merchantOrderNo),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/pdf', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/pdf', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderUpdate
     *
     * Update Comment.
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\MerchantOrderCommentUpdateRequest $merchantOrderCommentUpdateRequest merchantOrderCommentUpdateRequest (optional)
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse
     */
    public function orderUpdate($merchantOrderCommentUpdateRequest = null)
    {
        list($response) = $this->orderUpdateWithHttpInfo($merchantOrderCommentUpdateRequest);
        return $response;
    }

    /**
     * Operation orderUpdateWithHttpInfo
     *
     * Update Comment.
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\MerchantOrderCommentUpdateRequest $merchantOrderCommentUpdateRequest (optional)
     *
     * @throws \ChannelEngine\Merchant\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse|\ChannelEngine\Merchant\ApiClient\Model\ApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderUpdateWithHttpInfo($merchantOrderCommentUpdateRequest = null)
    {
        $request = $this->orderUpdateRequest($merchantOrderCommentUpdateRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\ChannelEngine\Merchant\ApiClient\Model\ApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderUpdateAsync
     *
     * Update Comment.
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\MerchantOrderCommentUpdateRequest $merchantOrderCommentUpdateRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderUpdateAsync($merchantOrderCommentUpdateRequest = null)
    {
        return $this->orderUpdateAsyncWithHttpInfo($merchantOrderCommentUpdateRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderUpdateAsyncWithHttpInfo
     *
     * Update Comment.
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\MerchantOrderCommentUpdateRequest $merchantOrderCommentUpdateRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderUpdateAsyncWithHttpInfo($merchantOrderCommentUpdateRequest = null)
    {
        $returnType = '\ChannelEngine\Merchant\ApiClient\Model\ApiResponse';
        $request = $this->orderUpdateRequest($merchantOrderCommentUpdateRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderUpdate'
     *
     * @param  \ChannelEngine\Merchant\ApiClient\Model\MerchantOrderCommentUpdateRequest $merchantOrderCommentUpdateRequest (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function orderUpdateRequest($merchantOrderCommentUpdateRequest = null)
    {

        $resourcePath = '/v2/orders/comment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json-patch+json', 'application/json', 'application/_*+json']
            );
        }

        // for model (json/xml)
        if (isset($merchantOrderCommentUpdateRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($merchantOrderCommentUpdateRequest));
            } else {
                $httpBody = $merchantOrderCommentUpdateRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apikey');
        if ($apiKey !== null) {
            $queryParams['apikey'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
